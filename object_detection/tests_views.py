import json

from django.urls import reverse
from rest_framework import status
from rest_framework.test import APITestCase


class ImgViewTest(APITestCase):
    def test_status_code(self):
        url = reverse('img')
        data = {
	        "img": ""
        }
        response = self.client.post(url, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_invalid_data(self):
        url = reverse('img')
        data = {}
        response = self.client.post(url, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)

    def test_get(self):
        url = reverse('img')
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_405_METHOD_NOT_ALLOWED)

    def test_detection_result(self):
        url = reverse('img')
        data = {
	        "img": ""
        }
        response = self.client.post(url, data, format='json')
        parsed_response = json.dumps(response.json())
        required_response = '{"boxes": [[0.20688292384147644, 0.02382349967956543, 0.8024313449859619, 0.9165056347846985]], "scores": [0.9100580811500549], "classes": [3], "display_string": ["car: 91%"]}'
        self.assertEqual(parsed_response, required_response)